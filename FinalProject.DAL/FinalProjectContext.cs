// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using FinalProject.BO.Models;
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;

namespace FinalProject.DAL;

public partial class FinalProjectContext : IdentityDbContext
{
    public FinalProjectContext(DbContextOptions<FinalProjectContext> options)
        : base(options)
    {
    }
    // public FinalProjectContext()
    // {
    // }

    // protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    // {
    //     if (!optionsBuilder.IsConfigured)
    //     {
    //         optionsBuilder.UseSqlServer("Server=localhost;Database=FinalProjectDB;User Id=sa;Password=Password123;TrustServerCertificate=True;");
    //     }
    // }

    public virtual DbSet<Booking> Bookings { get; set; }

    public virtual DbSet<Car> Cars { get; set; }

    public virtual DbSet<CarDelivery> CarDeliveries { get; set; }

    public virtual DbSet<CarDeliverySchedule> CarDeliverySchedules { get; set; }

    public virtual DbSet<ConsultHistory> ConsultHistories { get; set; }

    public virtual DbSet<CreditApplication> CreditApplications { get; set; }

    public virtual DbSet<CreditDocument> CreditDocuments { get; set; }

    public virtual DbSet<Customer> Customers { get; set; }

    public virtual DbSet<CustomerComplaint> CustomerComplaints { get; set; }

    public virtual DbSet<CustomerFeedback> CustomerFeedbacks { get; set; }

    public virtual DbSet<Dealer> Dealers { get; set; }

    public virtual DbSet<DealerInventory> DealerInventories { get; set; }

    public virtual DbSet<InventoryTransfer> InventoryTransfers { get; set; }

    public virtual DbSet<LeasingCompany> LeasingCompanies { get; set; }

    public virtual DbSet<LetterOfIntent> LetterOfIntents { get; set; }

    public virtual DbSet<LetterOfIntentDetail> LetterOfIntentDetails { get; set; }

    public virtual DbSet<PaymentHistory> PaymentHistories { get; set; }

    public virtual DbSet<PreDeliveryInspection> PreDeliveryInspections { get; set; }

    public virtual DbSet<SalesAgreement> SalesAgreements { get; set; }

    public virtual DbSet<SalesAgreementDetail> SalesAgreementDetails { get; set; }

    public virtual DbSet<SalesPerson> SalesPeople { get; set; }

    public virtual DbSet<ServiceHistory> ServiceHistories { get; set; }

    public virtual DbSet<TestDrive> TestDrives { get; set; }

    public virtual DbSet<VehicleRegistration> VehicleRegistrations { get; set; }

    public virtual DbSet<WarrantyClaim> WarrantyClaims { get; set; }

    // Tambahkan DbSets untuk entitas baru
    public virtual DbSet<CustomerNotification> CustomerNotifications { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        base.OnModelCreating(modelBuilder);
        modelBuilder.Entity<Booking>(entity =>
        {
            entity.HasKey(e => e.BookingId).HasName("PK__Booking__73951ACD9BAC6C83");

            entity.ToTable("Booking");

            entity.Property(e => e.BookingId).HasColumnName("BookingID");
            entity.Property(e => e.BookingDate).HasColumnType("datetime");
            entity.Property(e => e.BookingFee).HasColumnType("money");
            entity.Property(e => e.Loiid).HasColumnName("LOIID");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.Loi).WithMany(p => p.Bookings)
                .HasForeignKey(d => d.Loiid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Booking__LOIID__59063A47");
        });

        modelBuilder.Entity<Car>(entity =>
        {
            entity.HasKey(e => e.CarId).HasName("PK__Car__68A0340EF1B98578");

            entity.ToTable("Car");

            entity.Property(e => e.CarId).HasColumnName("CarID");
            entity.Property(e => e.BasePrice).HasColumnType("money");
            entity.Property(e => e.CarType)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Color)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Model)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CarDelivery>(entity =>
        {
            entity.HasKey(e => e.CarDeliveryId).HasName("PK__CarDeliv__4A7A87321887DBFB");

            entity.ToTable("CarDelivery");

            entity.Property(e => e.CarDeliveryId).HasColumnName("CarDeliveryID");
            entity.Property(e => e.DeliveryDate).HasColumnType("datetime");
            entity.Property(e => e.SalesAgreementId).HasColumnName("SalesAgreementID");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.SalesAgreement).WithMany(p => p.CarDeliveries)
                .HasForeignKey(d => d.SalesAgreementId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__CarDelive__Sales__75A278F5");
        });

        modelBuilder.Entity<CarDeliverySchedule>(entity =>
        {
            entity.HasKey(e => e.CarDeliveryScheduleId).HasName("PK__CarDeliv__7CE2033C585BEF82");

            entity.ToTable("CarDeliverySchedule");

            entity.Property(e => e.CarDeliveryScheduleId).HasColumnName("CarDeliveryScheduleID");
            entity.Property(e => e.CarDeliveryId).HasColumnName("CarDeliveryID");
            entity.Property(e => e.Note)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.ScheduledDate).HasColumnType("datetime");

            entity.HasOne(d => d.CarDelivery).WithMany(p => p.CarDeliverySchedules)
                .HasForeignKey(d => d.CarDeliveryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__CarDelive__CarDe__787EE5A0");
        });

        modelBuilder.Entity<ConsultHistory>(entity =>
        {
            entity.HasKey(e => e.ConsultHistoryId).HasName("PK__ConsultH__C5DB29E8D26D8647");

            entity.ToTable("ConsultHistory");

            entity.Property(e => e.ConsultHistoryId).HasColumnName("ConsultHistoryID");
            entity.Property(e => e.Budget).HasColumnType("money");
            entity.Property(e => e.CarId).HasColumnName("CarID");
            entity.Property(e => e.ConsultationDate).HasColumnType("datetime");
            entity.Property(e => e.CustomerId).HasColumnName("CustomerID");
            entity.Property(e => e.DealerId).HasColumnName("DealerID");
            entity.Property(e => e.Note)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.PaymentMethod)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SalesPersonId).HasColumnName("SalesPersonID");

            entity.HasOne(d => d.Car).WithMany(p => p.ConsultHistories)
                .HasForeignKey(d => d.CarId)
                .HasConstraintName("FK__ConsultHi__CarID__44FF419A");

            entity.HasOne(d => d.Customer).WithMany(p => p.ConsultHistories)
                .HasForeignKey(d => d.CustomerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__ConsultHi__Custo__4316F928");

            entity.HasOne(d => d.Dealer).WithMany(p => p.ConsultHistories)
                .HasForeignKey(d => d.DealerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__ConsultHi__Deale__4222D4EF");

            entity.HasOne(d => d.SalesPerson).WithMany(p => p.ConsultHistories)
                .HasForeignKey(d => d.SalesPersonId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__ConsultHi__Sales__440B1D61");
        });

        modelBuilder.Entity<CreditApplication>(entity =>
        {
            entity.HasKey(e => e.CreditAppId).HasName("PK__CreditAp__5F45706C3C1AEBF0");

            entity.ToTable("CreditApplication");

            entity.Property(e => e.CreditAppId).HasColumnName("CreditAppID");
            entity.Property(e => e.ApplicationDate).HasColumnType("datetime");
            entity.Property(e => e.LeasingCompanyId).HasColumnName("LeasingCompanyID");
            entity.Property(e => e.Loiid).HasColumnName("LOIID");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.LeasingCompany).WithMany(p => p.CreditApplications)
                .HasForeignKey(d => d.LeasingCompanyId)
                .HasConstraintName("FK__CreditApp__Leasi__5EBF139D");

            entity.HasOne(d => d.Loi).WithMany(p => p.CreditApplications)
                .HasForeignKey(d => d.Loiid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__CreditApp__LOIID__5DCAEF64");
        });

        modelBuilder.Entity<CreditDocument>(entity =>
        {
            entity.HasKey(e => e.CreditDocumentId).HasName("PK__CreditDo__52C1BB22B456C3F6");

            entity.ToTable("CreditDocument");

            entity.Property(e => e.CreditDocumentId).HasColumnName("CreditDocumentID");
            entity.Property(e => e.CreditAppId).HasColumnName("CreditAppID");
            entity.Property(e => e.DocumentPath)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.DocumentType)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UploadDate).HasColumnType("datetime");

            entity.HasOne(d => d.CreditApp).WithMany(p => p.CreditDocuments)
                .HasForeignKey(d => d.CreditAppId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__CreditDoc__Credi__619B8048");
        });

        modelBuilder.Entity<Customer>(entity =>
        {
            entity.HasKey(e => e.CustomerId).HasName("PK__Customer__A4AE64B8900658C3");

            entity.ToTable("Customer");

            entity.HasIndex(e => e.Email, "UQ__Customer__A9D10534904204F6").IsUnique();

            entity.Property(e => e.CustomerId).HasColumnName("CustomerID");
            entity.Property(e => e.Address)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PhoneNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CustomerComplaint>(entity =>
        {
            entity.HasKey(e => e.CustomerComplaintId).HasName("PK__Customer__ED804C331E897F38");

            entity.ToTable("CustomerComplaint");

            entity.Property(e => e.CustomerComplaintId).HasColumnName("CustomerComplaintID");
            entity.Property(e => e.ComplaintDate).HasColumnType("datetime");
            entity.Property(e => e.CustomerId).HasColumnName("CustomerID");
            entity.Property(e => e.Description)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.SalesAgreementId).HasColumnName("SalesAgreementID");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.Customer).WithMany(p => p.CustomerComplaints)
                .HasForeignKey(d => d.CustomerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__CustomerC__Custo__01142BA1");

            entity.HasOne(d => d.SalesAgreement).WithMany(p => p.CustomerComplaints)
                .HasForeignKey(d => d.SalesAgreementId)
                .HasConstraintName("FK__CustomerC__Sales__02084FDA");
        });

        modelBuilder.Entity<CustomerFeedback>(entity =>
        {
            entity.HasKey(e => e.CustomerFeedbackId).HasName("PK__Customer__88136B1135C655C0");

            entity.ToTable("CustomerFeedback");

            entity.Property(e => e.CustomerFeedbackId).HasColumnName("CustomerFeedbackID");
            entity.Property(e => e.Comment)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.CustomerId).HasColumnName("CustomerID");
            entity.Property(e => e.FeedbackDate).HasColumnType("datetime");
            entity.Property(e => e.SalesAgreementId).HasColumnName("SalesAgreementID");

            entity.HasOne(d => d.Customer).WithMany(p => p.CustomerFeedbacks)
                .HasForeignKey(d => d.CustomerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__CustomerF__Custo__14270015");

            entity.HasOne(d => d.SalesAgreement).WithMany(p => p.CustomerFeedbacks)
                .HasForeignKey(d => d.SalesAgreementId)
                .HasConstraintName("FK__CustomerF__Sales__151B244E");
        });

        modelBuilder.Entity<Dealer>(entity =>
        {
            entity.HasKey(e => e.DealerId).HasName("PK__Dealer__CA2F8E9220633F84");

            entity.ToTable("Dealer");

            entity.Property(e => e.DealerId).HasColumnName("DealerID");
            entity.Property(e => e.Address)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.City)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PhoneNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<DealerInventory>(entity =>
        {
            entity.HasKey(e => e.DealerInventoryId).HasName("PK__DealerIn__1499F8869311C33A");

            entity.ToTable("DealerInventory");

            entity.HasIndex(e => new { e.DealerId, e.CarId }, "UQ_DealerInventory_DealerCar").IsUnique();

            entity.Property(e => e.DealerInventoryId).HasColumnName("DealerInventoryID");
            entity.Property(e => e.CarId).HasColumnName("CarID");
            entity.Property(e => e.DealerId).HasColumnName("DealerID");
            entity.Property(e => e.Price).HasColumnType("money");

            entity.HasOne(d => d.Car).WithMany(p => p.DealerInventories)
                .HasForeignKey(d => d.CarId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__DealerInv__CarID__0C85DE4D");

            entity.HasOne(d => d.Dealer).WithMany(p => p.DealerInventories)
                .HasForeignKey(d => d.DealerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__DealerInv__Deale__0B91BA14");
        });

        modelBuilder.Entity<InventoryTransfer>(entity =>
        {
            entity.HasKey(e => e.InventoryTransferId).HasName("PK__Inventor__3E82BDBFF33DF1EC");

            entity.ToTable("InventoryTransfer");

            entity.Property(e => e.InventoryTransferId).HasColumnName("InventoryTransferID");
            entity.Property(e => e.CarId).HasColumnName("CarID");
            entity.Property(e => e.FromDealerId).HasColumnName("FromDealerID");
            entity.Property(e => e.MutationDate).HasColumnType("datetime");
            entity.Property(e => e.ToDealerId).HasColumnName("ToDealerID");

            entity.HasOne(d => d.Car).WithMany(p => p.InventoryTransfers)
                .HasForeignKey(d => d.CarId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Inventory__CarID__114A936A");

            entity.HasOne(d => d.FromDealer).WithMany(p => p.InventoryTransferFromDealers)
                .HasForeignKey(d => d.FromDealerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Inventory__FromD__0F624AF8");

            entity.HasOne(d => d.ToDealer).WithMany(p => p.InventoryTransferToDealers)
                .HasForeignKey(d => d.ToDealerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Inventory__ToDea__10566F31");
        });

        modelBuilder.Entity<LeasingCompany>(entity =>
        {
            entity.HasKey(e => e.LeasingCompanyId).HasName("PK__LeasingC__FC92E9E029975E80");

            entity.ToTable("LeasingCompany");

            entity.Property(e => e.LeasingCompanyId).HasColumnName("LeasingCompanyID");
            entity.Property(e => e.Address)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PhoneNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LetterOfIntent>(entity =>
        {
            entity.HasKey(e => e.Loiid).HasName("PK__LetterOf__E21E1B6CE8268F30");

            entity.ToTable("LetterOfIntent");

            entity.Property(e => e.Loiid).HasColumnName("LOIID");
            entity.Property(e => e.ConsultHistoryId).HasColumnName("ConsultHistoryID");
            entity.Property(e => e.CustomerId).HasColumnName("CustomerID");
            entity.Property(e => e.DealerId).HasColumnName("DealerID");
            entity.Property(e => e.Loidate)
                .HasColumnType("datetime")
                .HasColumnName("LOIDate");
            entity.Property(e => e.Note)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.PaymentMethod)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SalesPersonId).HasColumnName("SalesPersonID");
            entity.Property(e => e.TestDriveId).HasColumnName("TestDriveID");
            // Mapping untuk properti Status baru
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnType("varchar(20)")
                .HasColumnName("Status");
            // Jika Anda ingin menambahkan constraint CHECK:
            // entity.HasCheckConstraint("CK_LetterOfIntent_Status", "[Status] IN ('Draft', 'Submitted', 'PendingStock', 'ReadyForAgreement', 'Converted', 'Cancelled')");

            entity.HasOne(d => d.ConsultHistory).WithMany(p => p.LetterOfIntents)
                .HasForeignKey(d => d.ConsultHistoryId)
                .HasConstraintName("FK__LetterOfI__Consu__5165187F");

            entity.HasOne(d => d.Customer).WithMany(p => p.LetterOfIntents)
                .HasForeignKey(d => d.CustomerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__LetterOfI__Custo__4F7CD00D");

            entity.HasOne(d => d.Dealer).WithMany(p => p.LetterOfIntents)
                .HasForeignKey(d => d.DealerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__LetterOfI__Deale__4E88ABD4");

            entity.HasOne(d => d.SalesPerson).WithMany(p => p.LetterOfIntents)
                .HasForeignKey(d => d.SalesPersonId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__LetterOfI__Sales__5070F446");

            entity.HasOne(d => d.TestDrive).WithMany(p => p.LetterOfIntents)
                .HasForeignKey(d => d.TestDriveId)
                .HasConstraintName("FK__LetterOfI__TestD__52593CB8");
        });

        modelBuilder.Entity<LetterOfIntentDetail>(entity =>
        {
            entity.HasKey(e => e.LoidetailId).HasName("PK__LetterOf__194560EF4C6A8859");

            entity.ToTable("LetterOfIntentDetail");

            entity.Property(e => e.LoidetailId).HasColumnName("LOIDetailID");
            entity.Property(e => e.AgreedPrice).HasColumnType("money");
            entity.Property(e => e.CarId).HasColumnName("CarID");
            entity.Property(e => e.Discount).HasColumnType("money");
            entity.Property(e => e.DownPayment).HasColumnType("money");
            entity.Property(e => e.Loiid).HasColumnName("LOIID");
            entity.Property(e => e.Note)
                .HasMaxLength(200)
                .IsUnicode(false);

            entity.HasOne(d => d.Car).WithMany(p => p.LetterOfIntentDetails)
                .HasForeignKey(d => d.CarId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__LetterOfI__CarID__5629CD9C");

            entity.HasOne(d => d.Loi).WithMany(p => p.LetterOfIntentDetails)
                .HasForeignKey(d => d.Loiid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__LetterOfI__LOIID__5535A963");
        });

        modelBuilder.Entity<PaymentHistory>(entity =>
        {
            entity.HasKey(e => e.PaymentHistoryId).HasName("PK__PaymentH__F3B93391347E4128");

            entity.ToTable("PaymentHistory", tb => tb.HasTrigger("trg_UpdatePaymentStatus"));

            entity.Property(e => e.PaymentHistoryId).HasColumnName("PaymentHistoryID");
            entity.Property(e => e.CreditAppId).HasColumnName("CreditAppID");
            entity.Property(e => e.PaymentAmount).HasColumnType("money");
            entity.Property(e => e.PaymentDate).HasColumnType("datetime");
            entity.Property(e => e.PaymentType)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SalesAgreementId).HasColumnName("SalesAgreementID");

            entity.HasOne(d => d.CreditApp).WithMany(p => p.PaymentHistories)
                .HasForeignKey(d => d.CreditAppId)
                .HasConstraintName("FK__PaymentHi__Credi__6FE99F9F");

            entity.HasOne(d => d.SalesAgreement).WithMany(p => p.PaymentHistories)
                .HasForeignKey(d => d.SalesAgreementId)
                .HasConstraintName("FK__PaymentHi__Sales__6EF57B66");
        });

        modelBuilder.Entity<PreDeliveryInspection>(entity =>
        {
            entity.HasKey(e => e.PreDeliveryInspectionId).HasName("PK__PreDeliv__7E3BE4289EF0E92C");

            entity.ToTable("PreDeliveryInspection");

            entity.Property(e => e.PreDeliveryInspectionId).HasColumnName("PreDeliveryInspectionID");
            entity.Property(e => e.CarDeliveryId).HasColumnName("CarDeliveryID");
            entity.Property(e => e.InspectionDate).HasColumnType("datetime");
            entity.Property(e => e.InspectorName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Note)
                .HasMaxLength(200)
                .IsUnicode(false);

            entity.HasOne(d => d.CarDelivery).WithMany(p => p.PreDeliveryInspections)
                .HasForeignKey(d => d.CarDeliveryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__PreDelive__CarDe__7B5B524B");
        });

        modelBuilder.Entity<SalesAgreement>(entity =>
        {
            entity.HasKey(e => e.SalesAgreementId).HasName("PK__SalesAgr__4E5E148F0815B176");

            entity.ToTable("SalesAgreement");

            entity.Property(e => e.SalesAgreementId).HasColumnName("SalesAgreementID");
            entity.Property(e => e.CustomerId).HasColumnName("CustomerID");
            entity.Property(e => e.DealerId).HasColumnName("DealerID");
            entity.Property(e => e.Loiid).HasColumnName("LOIID");
            entity.Property(e => e.SalesPersonId).HasColumnName("SalesPersonID");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TotalAmount).HasColumnType("money");
            entity.Property(e => e.TransactionDate).HasColumnType("datetime");

            entity.HasOne(d => d.Customer).WithMany(p => p.SalesAgreements)
                .HasForeignKey(d => d.CustomerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__SalesAgre__Custo__656C112C");

            entity.HasOne(d => d.Dealer).WithMany(p => p.SalesAgreements)
                .HasForeignKey(d => d.DealerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__SalesAgre__Deale__6477ECF3");

            entity.HasOne(d => d.Loi).WithMany(p => p.SalesAgreements)
                .HasForeignKey(d => d.Loiid)
                .HasConstraintName("FK__SalesAgre__LOIID__6754599E");

            entity.HasOne(d => d.SalesPerson).WithMany(p => p.SalesAgreements)
                .HasForeignKey(d => d.SalesPersonId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__SalesAgre__Sales__66603565");
        });

        modelBuilder.Entity<SalesAgreementDetail>(entity =>
        {
            entity.HasKey(e => e.SalesAgreementDetailId).HasName("PK__SalesAgr__E9B6E9DD6495A820");

            entity.ToTable("SalesAgreementDetail", tb => tb.HasTrigger("trg_UpdateStockAfterSale"));

            entity.Property(e => e.SalesAgreementDetailId).HasColumnName("SalesAgreementDetailID");
            entity.Property(e => e.CarId).HasColumnName("CarID");
            entity.Property(e => e.Discount).HasColumnType("money");
            entity.Property(e => e.LoidetailId).HasColumnName("LOIDetailID");
            entity.Property(e => e.Note)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Price).HasColumnType("money");
            entity.Property(e => e.SalesAgreementId).HasColumnName("SalesAgreementID");

            entity.HasOne(d => d.Car).WithMany(p => p.SalesAgreementDetails)
                .HasForeignKey(d => d.CarId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__SalesAgre__CarID__6C190EBB");

            entity.HasOne(d => d.Loidetail).WithMany(p => p.SalesAgreementDetails)
                .HasForeignKey(d => d.LoidetailId)
                .HasConstraintName("FK__SalesAgre__LOIDe__6B24EA82");

            entity.HasOne(d => d.SalesAgreement).WithMany(p => p.SalesAgreementDetails)
                .HasForeignKey(d => d.SalesAgreementId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__SalesAgre__Sales__6A30C649");
        });

        modelBuilder.Entity<SalesPerson>(entity =>
        {
            entity.HasKey(e => e.SalesPersonId).HasName("PK__SalesPer__7A591C184AF9C120");

            entity.ToTable("SalesPerson");

            entity.Property(e => e.SalesPersonId).HasColumnName("SalesPersonID");
            entity.Property(e => e.DealerId).HasColumnName("DealerID");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.Dealer).WithMany(p => p.SalesPeople)
                .HasForeignKey(d => d.DealerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__SalesPers__Deale__3D5E1FD2");
        });

        modelBuilder.Entity<ServiceHistory>(entity =>
        {
            entity.HasKey(e => e.ServiceId).HasName("PK__ServiceH__C51BB0EA2DB4198F");

            entity.ToTable("ServiceHistory");

            entity.Property(e => e.ServiceId).HasColumnName("ServiceID");
            entity.Property(e => e.Note)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.SalesAgreementDetailId).HasColumnName("SalesAgreementDetailID");
            entity.Property(e => e.ServiceDate).HasColumnType("datetime");
            entity.Property(e => e.ServiceType)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.SalesAgreementDetail).WithMany(p => p.ServiceHistories)
                .HasForeignKey(d => d.SalesAgreementDetailId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__ServiceHi__Sales__7E37BEF6");
        });

        modelBuilder.Entity<TestDrive>(entity =>
        {
            entity.HasKey(e => e.TestDriveId).HasName("PK__TestDriv__BF98EF7276B02B41");

            entity.ToTable("TestDrive");

            entity.Property(e => e.TestDriveId).HasColumnName("TestDriveID");
            entity.Property(e => e.CarId).HasColumnName("CarID");
            entity.Property(e => e.ConsultHistoryId).HasColumnName("ConsultHistoryID");
            entity.Property(e => e.CustomerId).HasColumnName("CustomerID");
            entity.Property(e => e.DealerId).HasColumnName("DealerID");
            entity.Property(e => e.Note)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.SalesPersonId).HasColumnName("SalesPersonID");
            entity.Property(e => e.TestDriveDate).HasColumnType("datetime");

            entity.HasOne(d => d.Car).WithMany(p => p.TestDrives)
                .HasForeignKey(d => d.CarId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__TestDrive__CarID__4AB81AF0");

            entity.HasOne(d => d.ConsultHistory).WithMany(p => p.TestDrives)
                .HasForeignKey(d => d.ConsultHistoryId)
                .HasConstraintName("FK__TestDrive__Consu__4BAC3F29");

            entity.HasOne(d => d.Customer).WithMany(p => p.TestDrives)
                .HasForeignKey(d => d.CustomerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__TestDrive__Custo__48CFD27E");

            entity.HasOne(d => d.Dealer).WithMany(p => p.TestDrives)
                .HasForeignKey(d => d.DealerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__TestDrive__Deale__47DBAE45");

            entity.HasOne(d => d.SalesPerson).WithMany(p => p.TestDrives)
                .HasForeignKey(d => d.SalesPersonId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__TestDrive__Sales__49C3F6B7");
        });

        modelBuilder.Entity<VehicleRegistration>(entity =>
        {
            entity.HasKey(e => e.VehicleRegistrationId).HasName("PK__VehicleR__4256324830EE9972");

            entity.ToTable("VehicleRegistration");

            entity.Property(e => e.VehicleRegistrationId).HasColumnName("VehicleRegistrationID");
            entity.Property(e => e.InsuranceStatus)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.OwnershipBookNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RegistrationNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SalesAgreementDetailId).HasColumnName("SalesAgreementDetailID");
            entity.Property(e => e.TaxStatus)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.SalesAgreementDetail).WithMany(p => p.VehicleRegistrations)
                .HasForeignKey(d => d.SalesAgreementDetailId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__VehicleRe__Sales__72C60C4A");
        });

        modelBuilder.Entity<WarrantyClaim>(entity =>
        {
            entity.HasKey(e => e.WarrantyClaimId).HasName("PK__Warranty__F216750B97BF12D5");

            entity.ToTable("WarrantyClaim");

            entity.Property(e => e.WarrantyClaimId).HasColumnName("WarrantyClaimID");
            entity.Property(e => e.ClaimDate).HasColumnType("datetime");
            entity.Property(e => e.CustomerId).HasColumnName("CustomerID");
            entity.Property(e => e.Description)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.SalesAgreementDetailId).HasColumnName("SalesAgreementDetailID");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.Customer).WithMany(p => p.WarrantyClaims)
                .HasForeignKey(d => d.CustomerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__WarrantyC__Custo__04E4BC85");

            entity.HasOne(d => d.SalesAgreementDetail).WithMany(p => p.WarrantyClaims)
                .HasForeignKey(d => d.SalesAgreementDetailId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__WarrantyC__Sales__05D8E0BE");
        });

        // Konfigurasi untuk CustomerNotification
        modelBuilder.Entity<CustomerNotification>(entity =>
        {
            entity.HasKey(e => e.CustomerNotificationId).HasName("PK__CustomerNotification__0000000000000000"); // Placeholder, akan di-generate oleh migrasi

            entity.ToTable("CustomerNotification");

            entity.Property(e => e.CustomerNotificationId).HasColumnName("CustomerNotificationID");
            entity.Property(e => e.CustomerId).HasColumnName("CustomerID");
            entity.Property(e => e.Loiid).HasColumnName("LOIID");
            entity.Property(e => e.SalesAgreementId).HasColumnName("SalesAgreementID");
            entity.Property(e => e.NotificationType)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnType("varchar(50)");
            entity.Property(e => e.Message)
                .IsRequired()
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnType("varchar(500)");
            entity.Property(e => e.CreatedDate).HasColumnType("datetime").HasDefaultValueSql("GETDATE()");
            entity.Property(e => e.ReadDate).HasColumnType("datetime");
            entity.Property(e => e.IsRead).HasColumnType("bit");

            // Foreign Key Relationships
            entity.HasOne(d => d.Customer).WithMany(p => p.CustomerNotifications)
                .HasForeignKey(d => d.CustomerId)
                .OnDelete(DeleteBehavior.ClientSetNull) // Sesuaikan jika diperlukan
                .HasConstraintName("FK_CustomerNotification_Customer");

            entity.HasOne(d => d.LetterOfIntent).WithMany(p => p.CustomerNotifications)
                .HasForeignKey(d => d.Loiid)
                .HasConstraintName("FK_CustomerNotification_LetterOfIntent");

            entity.HasOne(d => d.SalesAgreement).WithMany(p => p.CustomerNotifications)
                .HasForeignKey(d => d.SalesAgreementId)
                .HasConstraintName("FK_CustomerNotification_SalesAgreement");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}