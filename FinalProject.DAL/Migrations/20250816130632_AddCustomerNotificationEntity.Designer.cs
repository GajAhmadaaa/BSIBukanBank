// <auto-generated />
using System;
using FinalProject.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FinalProject.DAL.Migrations
{
    [DbContext(typeof(FinalProjectContext))]
    [Migration("20250816130632_AddCustomerNotificationEntity")]
    partial class AddCustomerNotificationEntity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FinalProject.BO.Models.Booking", b =>
                {
                    b.Property<int>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BookingID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingId"));

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("BookingFee")
                        .HasColumnType("money");

                    b.Property<int>("Loiid")
                        .HasColumnType("int")
                        .HasColumnName("LOIID");

                    b.Property<string>("Status")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("BookingId")
                        .HasName("PK__Booking__73951ACD9BAC6C83");

                    b.HasIndex("Loiid");

                    b.ToTable("Booking", (string)null);
                });

            modelBuilder.Entity("FinalProject.BO.Models.Car", b =>
                {
                    b.Property<int>("CarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CarID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CarId"));

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("money");

                    b.Property<string>("CarType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Color")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("Year")
                        .HasColumnType("int");

                    b.HasKey("CarId")
                        .HasName("PK__Car__68A0340EF1B98578");

                    b.ToTable("Car", (string)null);
                });

            modelBuilder.Entity("FinalProject.BO.Models.CarDelivery", b =>
                {
                    b.Property<int>("CarDeliveryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CarDeliveryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CarDeliveryId"));

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("datetime");

                    b.Property<int>("SalesAgreementId")
                        .HasColumnType("int")
                        .HasColumnName("SalesAgreementID");

                    b.Property<string>("Status")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("CarDeliveryId")
                        .HasName("PK__CarDeliv__4A7A87321887DBFB");

                    b.HasIndex("SalesAgreementId");

                    b.ToTable("CarDelivery", (string)null);
                });

            modelBuilder.Entity("FinalProject.BO.Models.CarDeliverySchedule", b =>
                {
                    b.Property<int>("CarDeliveryScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CarDeliveryScheduleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CarDeliveryScheduleId"));

                    b.Property<int>("CarDeliveryId")
                        .HasColumnType("int")
                        .HasColumnName("CarDeliveryID");

                    b.Property<string>("Note")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("ScheduledDate")
                        .HasColumnType("datetime");

                    b.HasKey("CarDeliveryScheduleId")
                        .HasName("PK__CarDeliv__7CE2033C585BEF82");

                    b.HasIndex("CarDeliveryId");

                    b.ToTable("CarDeliverySchedule", (string)null);
                });

            modelBuilder.Entity("FinalProject.BO.Models.ConsultHistory", b =>
                {
                    b.Property<int>("ConsultHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ConsultHistoryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConsultHistoryId"));

                    b.Property<decimal?>("Budget")
                        .HasColumnType("money");

                    b.Property<int?>("CarId")
                        .HasColumnType("int")
                        .HasColumnName("CarID");

                    b.Property<DateTime>("ConsultationDate")
                        .HasColumnType("datetime");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<int>("DealerId")
                        .HasColumnType("int")
                        .HasColumnName("DealerID");

                    b.Property<string>("Note")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("SalesPersonId")
                        .HasColumnType("int")
                        .HasColumnName("SalesPersonID");

                    b.HasKey("ConsultHistoryId")
                        .HasName("PK__ConsultH__C5DB29E8D26D8647");

                    b.HasIndex("CarId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DealerId");

                    b.HasIndex("SalesPersonId");

                    b.ToTable("ConsultHistory", (string)null);
                });

            modelBuilder.Entity("FinalProject.BO.Models.CreditApplication", b =>
                {
                    b.Property<int>("CreditAppId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CreditAppID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CreditAppId"));

                    b.Property<DateTime>("ApplicationDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("LeasingCompanyId")
                        .HasColumnType("int")
                        .HasColumnName("LeasingCompanyID");

                    b.Property<int>("Loiid")
                        .HasColumnType("int")
                        .HasColumnName("LOIID");

                    b.Property<string>("Status")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("CreditAppId")
                        .HasName("PK__CreditAp__5F45706C3C1AEBF0");

                    b.HasIndex("LeasingCompanyId");

                    b.HasIndex("Loiid");

                    b.ToTable("CreditApplication", (string)null);
                });

            modelBuilder.Entity("FinalProject.BO.Models.CreditDocument", b =>
                {
                    b.Property<int>("CreditDocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CreditDocumentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CreditDocumentId"));

                    b.Property<int>("CreditAppId")
                        .HasColumnType("int")
                        .HasColumnName("CreditAppID");

                    b.Property<string>("DocumentPath")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UploadDate")
                        .HasColumnType("datetime");

                    b.HasKey("CreditDocumentId")
                        .HasName("PK__CreditDo__52C1BB22B456C3F6");

                    b.HasIndex("CreditAppId");

                    b.ToTable("CreditDocument", (string)null);
                });

            modelBuilder.Entity("FinalProject.BO.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("CustomerId")
                        .HasName("PK__Customer__A4AE64B8900658C3");

                    b.HasIndex(new[] { "Email" }, "UQ__Customer__A9D10534904204F6")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.ToTable("Customer", (string)null);
                });

            modelBuilder.Entity("FinalProject.BO.Models.CustomerComplaint", b =>
                {
                    b.Property<int>("CustomerComplaintId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CustomerComplaintID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerComplaintId"));

                    b.Property<DateTime>("ComplaintDate")
                        .HasColumnType("datetime");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("SalesAgreementId")
                        .HasColumnType("int")
                        .HasColumnName("SalesAgreementID");

                    b.Property<string>("Status")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("CustomerComplaintId")
                        .HasName("PK__Customer__ED804C331E897F38");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SalesAgreementId");

                    b.ToTable("CustomerComplaint", (string)null);
                });

            modelBuilder.Entity("FinalProject.BO.Models.CustomerFeedback", b =>
                {
                    b.Property<int>("CustomerFeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CustomerFeedbackID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerFeedbackId"));

                    b.Property<string>("Comment")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<DateTime>("FeedbackDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("Rating")
                        .HasColumnType("int");

                    b.Property<int?>("SalesAgreementId")
                        .HasColumnType("int")
                        .HasColumnName("SalesAgreementID");

                    b.HasKey("CustomerFeedbackId")
                        .HasName("PK__Customer__88136B1135C655C0");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SalesAgreementId");

                    b.ToTable("CustomerFeedback", (string)null);
                });

            modelBuilder.Entity("FinalProject.BO.Models.CustomerNotification", b =>
                {
                    b.Property<int>("CustomerNotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CustomerNotificationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerNotificationId"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<int?>("Loid")
                        .HasColumnType("int")
                        .HasColumnName("LOIID");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("NotificationType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("ReadDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("SalesAgreementId")
                        .HasColumnType("int")
                        .HasColumnName("SalesAgreementID");

                    b.HasKey("CustomerNotificationId")
                        .HasName("PK__CustomerNotification__0000000000000000");

                    b.HasIndex("CustomerId");

                    b.HasIndex("Loid");

                    b.HasIndex("SalesAgreementId");

                    b.ToTable("CustomerNotification", (string)null);
                });

            modelBuilder.Entity("FinalProject.BO.Models.Dealer", b =>
                {
                    b.Property<int>("DealerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DealerID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DealerId"));

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("DealerId")
                        .HasName("PK__Dealer__CA2F8E9220633F84");

                    b.ToTable("Dealer", (string)null);
                });

            modelBuilder.Entity("FinalProject.BO.Models.DealerInventory", b =>
                {
                    b.Property<int>("DealerInventoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DealerInventoryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DealerInventoryId"));

                    b.Property<int>("CarId")
                        .HasColumnType("int")
                        .HasColumnName("CarID");

                    b.Property<int>("DealerId")
                        .HasColumnType("int")
                        .HasColumnName("DealerID");

                    b.Property<double>("DiscountPercent")
                        .HasColumnType("float");

                    b.Property<double>("FeePercent")
                        .HasColumnType("float");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("DealerInventoryId")
                        .HasName("PK__DealerIn__1499F8869311C33A");

                    b.HasIndex("CarId");

                    b.HasIndex(new[] { "DealerId", "CarId" }, "UQ_DealerInventory_DealerCar")
                        .IsUnique();

                    b.ToTable("DealerInventory", (string)null);
                });

            modelBuilder.Entity("FinalProject.BO.Models.InventoryTransfer", b =>
                {
                    b.Property<int>("InventoryTransferId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("InventoryTransferID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InventoryTransferId"));

                    b.Property<int>("CarId")
                        .HasColumnType("int")
                        .HasColumnName("CarID");

                    b.Property<int>("FromDealerId")
                        .HasColumnType("int")
                        .HasColumnName("FromDealerID");

                    b.Property<DateTime>("MutationDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("ToDealerId")
                        .HasColumnType("int")
                        .HasColumnName("ToDealerID");

                    b.HasKey("InventoryTransferId")
                        .HasName("PK__Inventor__3E82BDBFF33DF1EC");

                    b.HasIndex("CarId");

                    b.HasIndex("FromDealerId");

                    b.HasIndex("ToDealerId");

                    b.ToTable("InventoryTransfer", (string)null);
                });

            modelBuilder.Entity("FinalProject.BO.Models.LeasingCompany", b =>
                {
                    b.Property<int>("LeasingCompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LeasingCompanyID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LeasingCompanyId"));

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("LeasingCompanyId")
                        .HasName("PK__LeasingC__FC92E9E029975E80");

                    b.ToTable("LeasingCompany", (string)null);
                });

            modelBuilder.Entity("FinalProject.BO.Models.LetterOfIntent", b =>
                {
                    b.Property<int>("Loiid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LOIID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Loiid"));

                    b.Property<int?>("ConsultHistoryId")
                        .HasColumnType("int")
                        .HasColumnName("ConsultHistoryID");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<int>("DealerId")
                        .HasColumnType("int")
                        .HasColumnName("DealerID");

                    b.Property<DateTime>("Loidate")
                        .HasColumnType("datetime")
                        .HasColumnName("LOIDate");

                    b.Property<string>("Note")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("SalesPersonId")
                        .HasColumnType("int")
                        .HasColumnName("SalesPersonID");

                    b.Property<string>("Status")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Status");

                    b.Property<int?>("TestDriveId")
                        .HasColumnType("int")
                        .HasColumnName("TestDriveID");

                    b.HasKey("Loiid")
                        .HasName("PK__LetterOf__E21E1B6CE8268F30");

                    b.HasIndex("ConsultHistoryId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DealerId");

                    b.HasIndex("SalesPersonId");

                    b.HasIndex("TestDriveId");

                    b.ToTable("LetterOfIntent", (string)null);
                });

            modelBuilder.Entity("FinalProject.BO.Models.LetterOfIntentDetail", b =>
                {
                    b.Property<int>("LoidetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LOIDetailID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LoidetailId"));

                    b.Property<decimal>("AgreedPrice")
                        .HasColumnType("money");

                    b.Property<int>("CarId")
                        .HasColumnType("int")
                        .HasColumnName("CarID");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("money");

                    b.Property<decimal?>("DownPayment")
                        .HasColumnType("money");

                    b.Property<int>("Loiid")
                        .HasColumnType("int")
                        .HasColumnName("LOIID");

                    b.Property<string>("Note")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.HasKey("LoidetailId")
                        .HasName("PK__LetterOf__194560EF4C6A8859");

                    b.HasIndex("CarId");

                    b.HasIndex("Loiid");

                    b.ToTable("LetterOfIntentDetail", (string)null);
                });

            modelBuilder.Entity("FinalProject.BO.Models.PaymentHistory", b =>
                {
                    b.Property<int>("PaymentHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PaymentHistoryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentHistoryId"));

                    b.Property<int?>("CreditAppId")
                        .HasColumnType("int")
                        .HasColumnName("CreditAppID");

                    b.Property<decimal>("PaymentAmount")
                        .HasColumnType("money");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PaymentType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("SalesAgreementId")
                        .HasColumnType("int")
                        .HasColumnName("SalesAgreementID");

                    b.HasKey("PaymentHistoryId")
                        .HasName("PK__PaymentH__F3B93391347E4128");

                    b.HasIndex("CreditAppId");

                    b.HasIndex("SalesAgreementId");

                    b.ToTable("PaymentHistory", null, t =>
                        {
                            t.HasTrigger("trg_UpdatePaymentStatus");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("FinalProject.BO.Models.PreDeliveryInspection", b =>
                {
                    b.Property<int>("PreDeliveryInspectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PreDeliveryInspectionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PreDeliveryInspectionId"));

                    b.Property<int>("CarDeliveryId")
                        .HasColumnType("int")
                        .HasColumnName("CarDeliveryID");

                    b.Property<DateTime>("InspectionDate")
                        .HasColumnType("datetime");

                    b.Property<string>("InspectorName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Note")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.HasKey("PreDeliveryInspectionId")
                        .HasName("PK__PreDeliv__7E3BE4289EF0E92C");

                    b.HasIndex("CarDeliveryId");

                    b.ToTable("PreDeliveryInspection", (string)null);
                });

            modelBuilder.Entity("FinalProject.BO.Models.SalesAgreement", b =>
                {
                    b.Property<int>("SalesAgreementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SalesAgreementID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SalesAgreementId"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<int>("DealerId")
                        .HasColumnType("int")
                        .HasColumnName("DealerID");

                    b.Property<int?>("Loiid")
                        .HasColumnType("int")
                        .HasColumnName("LOIID");

                    b.Property<int>("SalesPersonId")
                        .HasColumnType("int")
                        .HasColumnName("SalesPersonID");

                    b.Property<string>("Status")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<decimal?>("TotalAmount")
                        .HasColumnType("money");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime");

                    b.HasKey("SalesAgreementId")
                        .HasName("PK__SalesAgr__4E5E148F0815B176");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DealerId");

                    b.HasIndex("Loiid");

                    b.HasIndex("SalesPersonId");

                    b.ToTable("SalesAgreement", (string)null);
                });

            modelBuilder.Entity("FinalProject.BO.Models.SalesAgreementDetail", b =>
                {
                    b.Property<int>("SalesAgreementDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SalesAgreementDetailID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SalesAgreementDetailId"));

                    b.Property<int>("CarId")
                        .HasColumnType("int")
                        .HasColumnName("CarID");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("money");

                    b.Property<int?>("LoidetailId")
                        .HasColumnType("int")
                        .HasColumnName("LOIDetailID");

                    b.Property<string>("Note")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.Property<int>("SalesAgreementId")
                        .HasColumnType("int")
                        .HasColumnName("SalesAgreementID");

                    b.HasKey("SalesAgreementDetailId")
                        .HasName("PK__SalesAgr__E9B6E9DD6495A820");

                    b.HasIndex("CarId");

                    b.HasIndex("LoidetailId");

                    b.HasIndex("SalesAgreementId");

                    b.ToTable("SalesAgreementDetail", null, t =>
                        {
                            t.HasTrigger("trg_UpdateStockAfterSale");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("FinalProject.BO.Models.SalesPerson", b =>
                {
                    b.Property<int>("SalesPersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SalesPersonID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SalesPersonId"));

                    b.Property<int>("DealerId")
                        .HasColumnType("int")
                        .HasColumnName("DealerID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("SalesPersonId")
                        .HasName("PK__SalesPer__7A591C184AF9C120");

                    b.HasIndex("DealerId");

                    b.ToTable("SalesPerson", (string)null);
                });

            modelBuilder.Entity("FinalProject.BO.Models.ServiceHistory", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ServiceID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceId"));

                    b.Property<string>("Note")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("SalesAgreementDetailId")
                        .HasColumnType("int")
                        .HasColumnName("SalesAgreementDetailID");

                    b.Property<DateTime>("ServiceDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ServiceType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ServiceId")
                        .HasName("PK__ServiceH__C51BB0EA2DB4198F");

                    b.HasIndex("SalesAgreementDetailId");

                    b.ToTable("ServiceHistory", (string)null);
                });

            modelBuilder.Entity("FinalProject.BO.Models.TestDrive", b =>
                {
                    b.Property<int>("TestDriveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TestDriveID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TestDriveId"));

                    b.Property<int>("CarId")
                        .HasColumnType("int")
                        .HasColumnName("CarID");

                    b.Property<int?>("ConsultHistoryId")
                        .HasColumnType("int")
                        .HasColumnName("ConsultHistoryID");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<int>("DealerId")
                        .HasColumnType("int")
                        .HasColumnName("DealerID");

                    b.Property<string>("Note")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("SalesPersonId")
                        .HasColumnType("int")
                        .HasColumnName("SalesPersonID");

                    b.Property<DateTime>("TestDriveDate")
                        .HasColumnType("datetime");

                    b.HasKey("TestDriveId")
                        .HasName("PK__TestDriv__BF98EF7276B02B41");

                    b.HasIndex("CarId");

                    b.HasIndex("ConsultHistoryId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DealerId");

                    b.HasIndex("SalesPersonId");

                    b.ToTable("TestDrive", (string)null);
                });

            modelBuilder.Entity("FinalProject.BO.Models.VehicleRegistration", b =>
                {
                    b.Property<int>("VehicleRegistrationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("VehicleRegistrationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleRegistrationId"));

                    b.Property<string>("InsuranceStatus")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("OwnershipBookNumber")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("RegistrationNumber")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("SalesAgreementDetailId")
                        .HasColumnType("int")
                        .HasColumnName("SalesAgreementDetailID");

                    b.Property<string>("TaxStatus")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("VehicleRegistrationId")
                        .HasName("PK__VehicleR__4256324830EE9972");

                    b.HasIndex("SalesAgreementDetailId");

                    b.ToTable("VehicleRegistration", (string)null);
                });

            modelBuilder.Entity("FinalProject.BO.Models.WarrantyClaim", b =>
                {
                    b.Property<int>("WarrantyClaimId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WarrantyClaimID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WarrantyClaimId"));

                    b.Property<DateTime>("ClaimDate")
                        .HasColumnType("datetime");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("SalesAgreementDetailId")
                        .HasColumnType("int")
                        .HasColumnName("SalesAgreementDetailID");

                    b.Property<string>("Status")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("WarrantyClaimId")
                        .HasName("PK__Warranty__F216750B97BF12D5");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SalesAgreementDetailId");

                    b.ToTable("WarrantyClaim", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FinalProject.BO.Models.Booking", b =>
                {
                    b.HasOne("FinalProject.BO.Models.LetterOfIntent", "Loi")
                        .WithMany("Bookings")
                        .HasForeignKey("Loiid")
                        .IsRequired()
                        .HasConstraintName("FK__Booking__LOIID__59063A47");

                    b.Navigation("Loi");
                });

            modelBuilder.Entity("FinalProject.BO.Models.CarDelivery", b =>
                {
                    b.HasOne("FinalProject.BO.Models.SalesAgreement", "SalesAgreement")
                        .WithMany("CarDeliveries")
                        .HasForeignKey("SalesAgreementId")
                        .IsRequired()
                        .HasConstraintName("FK__CarDelive__Sales__75A278F5");

                    b.Navigation("SalesAgreement");
                });

            modelBuilder.Entity("FinalProject.BO.Models.CarDeliverySchedule", b =>
                {
                    b.HasOne("FinalProject.BO.Models.CarDelivery", "CarDelivery")
                        .WithMany("CarDeliverySchedules")
                        .HasForeignKey("CarDeliveryId")
                        .IsRequired()
                        .HasConstraintName("FK__CarDelive__CarDe__787EE5A0");

                    b.Navigation("CarDelivery");
                });

            modelBuilder.Entity("FinalProject.BO.Models.ConsultHistory", b =>
                {
                    b.HasOne("FinalProject.BO.Models.Car", "Car")
                        .WithMany("ConsultHistories")
                        .HasForeignKey("CarId")
                        .HasConstraintName("FK__ConsultHi__CarID__44FF419A");

                    b.HasOne("FinalProject.BO.Models.Customer", "Customer")
                        .WithMany("ConsultHistories")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK__ConsultHi__Custo__4316F928");

                    b.HasOne("FinalProject.BO.Models.Dealer", "Dealer")
                        .WithMany("ConsultHistories")
                        .HasForeignKey("DealerId")
                        .IsRequired()
                        .HasConstraintName("FK__ConsultHi__Deale__4222D4EF");

                    b.HasOne("FinalProject.BO.Models.SalesPerson", "SalesPerson")
                        .WithMany("ConsultHistories")
                        .HasForeignKey("SalesPersonId")
                        .IsRequired()
                        .HasConstraintName("FK__ConsultHi__Sales__440B1D61");

                    b.Navigation("Car");

                    b.Navigation("Customer");

                    b.Navigation("Dealer");

                    b.Navigation("SalesPerson");
                });

            modelBuilder.Entity("FinalProject.BO.Models.CreditApplication", b =>
                {
                    b.HasOne("FinalProject.BO.Models.LeasingCompany", "LeasingCompany")
                        .WithMany("CreditApplications")
                        .HasForeignKey("LeasingCompanyId")
                        .HasConstraintName("FK__CreditApp__Leasi__5EBF139D");

                    b.HasOne("FinalProject.BO.Models.LetterOfIntent", "Loi")
                        .WithMany("CreditApplications")
                        .HasForeignKey("Loiid")
                        .IsRequired()
                        .HasConstraintName("FK__CreditApp__LOIID__5DCAEF64");

                    b.Navigation("LeasingCompany");

                    b.Navigation("Loi");
                });

            modelBuilder.Entity("FinalProject.BO.Models.CreditDocument", b =>
                {
                    b.HasOne("FinalProject.BO.Models.CreditApplication", "CreditApp")
                        .WithMany("CreditDocuments")
                        .HasForeignKey("CreditAppId")
                        .IsRequired()
                        .HasConstraintName("FK__CreditDoc__Credi__619B8048");

                    b.Navigation("CreditApp");
                });

            modelBuilder.Entity("FinalProject.BO.Models.CustomerComplaint", b =>
                {
                    b.HasOne("FinalProject.BO.Models.Customer", "Customer")
                        .WithMany("CustomerComplaints")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK__CustomerC__Custo__01142BA1");

                    b.HasOne("FinalProject.BO.Models.SalesAgreement", "SalesAgreement")
                        .WithMany("CustomerComplaints")
                        .HasForeignKey("SalesAgreementId")
                        .HasConstraintName("FK__CustomerC__Sales__02084FDA");

                    b.Navigation("Customer");

                    b.Navigation("SalesAgreement");
                });

            modelBuilder.Entity("FinalProject.BO.Models.CustomerFeedback", b =>
                {
                    b.HasOne("FinalProject.BO.Models.Customer", "Customer")
                        .WithMany("CustomerFeedbacks")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK__CustomerF__Custo__14270015");

                    b.HasOne("FinalProject.BO.Models.SalesAgreement", "SalesAgreement")
                        .WithMany("CustomerFeedbacks")
                        .HasForeignKey("SalesAgreementId")
                        .HasConstraintName("FK__CustomerF__Sales__151B244E");

                    b.Navigation("Customer");

                    b.Navigation("SalesAgreement");
                });

            modelBuilder.Entity("FinalProject.BO.Models.CustomerNotification", b =>
                {
                    b.HasOne("FinalProject.BO.Models.Customer", "Customer")
                        .WithMany("CustomerNotifications")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_CustomerNotification_Customer");

                    b.HasOne("FinalProject.BO.Models.LetterOfIntent", "LetterOfIntent")
                        .WithMany("CustomerNotifications")
                        .HasForeignKey("Loid")
                        .HasConstraintName("FK_CustomerNotification_LetterOfIntent");

                    b.HasOne("FinalProject.BO.Models.SalesAgreement", "SalesAgreement")
                        .WithMany("CustomerNotifications")
                        .HasForeignKey("SalesAgreementId")
                        .HasConstraintName("FK_CustomerNotification_SalesAgreement");

                    b.Navigation("Customer");

                    b.Navigation("LetterOfIntent");

                    b.Navigation("SalesAgreement");
                });

            modelBuilder.Entity("FinalProject.BO.Models.DealerInventory", b =>
                {
                    b.HasOne("FinalProject.BO.Models.Car", "Car")
                        .WithMany("DealerInventories")
                        .HasForeignKey("CarId")
                        .IsRequired()
                        .HasConstraintName("FK__DealerInv__CarID__0C85DE4D");

                    b.HasOne("FinalProject.BO.Models.Dealer", "Dealer")
                        .WithMany("DealerInventories")
                        .HasForeignKey("DealerId")
                        .IsRequired()
                        .HasConstraintName("FK__DealerInv__Deale__0B91BA14");

                    b.Navigation("Car");

                    b.Navigation("Dealer");
                });

            modelBuilder.Entity("FinalProject.BO.Models.InventoryTransfer", b =>
                {
                    b.HasOne("FinalProject.BO.Models.Car", "Car")
                        .WithMany("InventoryTransfers")
                        .HasForeignKey("CarId")
                        .IsRequired()
                        .HasConstraintName("FK__Inventory__CarID__114A936A");

                    b.HasOne("FinalProject.BO.Models.Dealer", "FromDealer")
                        .WithMany("InventoryTransferFromDealers")
                        .HasForeignKey("FromDealerId")
                        .IsRequired()
                        .HasConstraintName("FK__Inventory__FromD__0F624AF8");

                    b.HasOne("FinalProject.BO.Models.Dealer", "ToDealer")
                        .WithMany("InventoryTransferToDealers")
                        .HasForeignKey("ToDealerId")
                        .IsRequired()
                        .HasConstraintName("FK__Inventory__ToDea__10566F31");

                    b.Navigation("Car");

                    b.Navigation("FromDealer");

                    b.Navigation("ToDealer");
                });

            modelBuilder.Entity("FinalProject.BO.Models.LetterOfIntent", b =>
                {
                    b.HasOne("FinalProject.BO.Models.ConsultHistory", "ConsultHistory")
                        .WithMany("LetterOfIntents")
                        .HasForeignKey("ConsultHistoryId")
                        .HasConstraintName("FK__LetterOfI__Consu__5165187F");

                    b.HasOne("FinalProject.BO.Models.Customer", "Customer")
                        .WithMany("LetterOfIntents")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK__LetterOfI__Custo__4F7CD00D");

                    b.HasOne("FinalProject.BO.Models.Dealer", "Dealer")
                        .WithMany("LetterOfIntents")
                        .HasForeignKey("DealerId")
                        .IsRequired()
                        .HasConstraintName("FK__LetterOfI__Deale__4E88ABD4");

                    b.HasOne("FinalProject.BO.Models.SalesPerson", "SalesPerson")
                        .WithMany("LetterOfIntents")
                        .HasForeignKey("SalesPersonId")
                        .IsRequired()
                        .HasConstraintName("FK__LetterOfI__Sales__5070F446");

                    b.HasOne("FinalProject.BO.Models.TestDrive", "TestDrive")
                        .WithMany("LetterOfIntents")
                        .HasForeignKey("TestDriveId")
                        .HasConstraintName("FK__LetterOfI__TestD__52593CB8");

                    b.Navigation("ConsultHistory");

                    b.Navigation("Customer");

                    b.Navigation("Dealer");

                    b.Navigation("SalesPerson");

                    b.Navigation("TestDrive");
                });

            modelBuilder.Entity("FinalProject.BO.Models.LetterOfIntentDetail", b =>
                {
                    b.HasOne("FinalProject.BO.Models.Car", "Car")
                        .WithMany("LetterOfIntentDetails")
                        .HasForeignKey("CarId")
                        .IsRequired()
                        .HasConstraintName("FK__LetterOfI__CarID__5629CD9C");

                    b.HasOne("FinalProject.BO.Models.LetterOfIntent", "Loi")
                        .WithMany("LetterOfIntentDetails")
                        .HasForeignKey("Loiid")
                        .IsRequired()
                        .HasConstraintName("FK__LetterOfI__LOIID__5535A963");

                    b.Navigation("Car");

                    b.Navigation("Loi");
                });

            modelBuilder.Entity("FinalProject.BO.Models.PaymentHistory", b =>
                {
                    b.HasOne("FinalProject.BO.Models.CreditApplication", "CreditApp")
                        .WithMany("PaymentHistories")
                        .HasForeignKey("CreditAppId")
                        .HasConstraintName("FK__PaymentHi__Credi__6FE99F9F");

                    b.HasOne("FinalProject.BO.Models.SalesAgreement", "SalesAgreement")
                        .WithMany("PaymentHistories")
                        .HasForeignKey("SalesAgreementId")
                        .HasConstraintName("FK__PaymentHi__Sales__6EF57B66");

                    b.Navigation("CreditApp");

                    b.Navigation("SalesAgreement");
                });

            modelBuilder.Entity("FinalProject.BO.Models.PreDeliveryInspection", b =>
                {
                    b.HasOne("FinalProject.BO.Models.CarDelivery", "CarDelivery")
                        .WithMany("PreDeliveryInspections")
                        .HasForeignKey("CarDeliveryId")
                        .IsRequired()
                        .HasConstraintName("FK__PreDelive__CarDe__7B5B524B");

                    b.Navigation("CarDelivery");
                });

            modelBuilder.Entity("FinalProject.BO.Models.SalesAgreement", b =>
                {
                    b.HasOne("FinalProject.BO.Models.Customer", "Customer")
                        .WithMany("SalesAgreements")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK__SalesAgre__Custo__656C112C");

                    b.HasOne("FinalProject.BO.Models.Dealer", "Dealer")
                        .WithMany("SalesAgreements")
                        .HasForeignKey("DealerId")
                        .IsRequired()
                        .HasConstraintName("FK__SalesAgre__Deale__6477ECF3");

                    b.HasOne("FinalProject.BO.Models.LetterOfIntent", "Loi")
                        .WithMany("SalesAgreements")
                        .HasForeignKey("Loiid")
                        .HasConstraintName("FK__SalesAgre__LOIID__6754599E");

                    b.HasOne("FinalProject.BO.Models.SalesPerson", "SalesPerson")
                        .WithMany("SalesAgreements")
                        .HasForeignKey("SalesPersonId")
                        .IsRequired()
                        .HasConstraintName("FK__SalesAgre__Sales__66603565");

                    b.Navigation("Customer");

                    b.Navigation("Dealer");

                    b.Navigation("Loi");

                    b.Navigation("SalesPerson");
                });

            modelBuilder.Entity("FinalProject.BO.Models.SalesAgreementDetail", b =>
                {
                    b.HasOne("FinalProject.BO.Models.Car", "Car")
                        .WithMany("SalesAgreementDetails")
                        .HasForeignKey("CarId")
                        .IsRequired()
                        .HasConstraintName("FK__SalesAgre__CarID__6C190EBB");

                    b.HasOne("FinalProject.BO.Models.LetterOfIntentDetail", "Loidetail")
                        .WithMany("SalesAgreementDetails")
                        .HasForeignKey("LoidetailId")
                        .HasConstraintName("FK__SalesAgre__LOIDe__6B24EA82");

                    b.HasOne("FinalProject.BO.Models.SalesAgreement", "SalesAgreement")
                        .WithMany("SalesAgreementDetails")
                        .HasForeignKey("SalesAgreementId")
                        .IsRequired()
                        .HasConstraintName("FK__SalesAgre__Sales__6A30C649");

                    b.Navigation("Car");

                    b.Navigation("Loidetail");

                    b.Navigation("SalesAgreement");
                });

            modelBuilder.Entity("FinalProject.BO.Models.SalesPerson", b =>
                {
                    b.HasOne("FinalProject.BO.Models.Dealer", "Dealer")
                        .WithMany("SalesPeople")
                        .HasForeignKey("DealerId")
                        .IsRequired()
                        .HasConstraintName("FK__SalesPers__Deale__3D5E1FD2");

                    b.Navigation("Dealer");
                });

            modelBuilder.Entity("FinalProject.BO.Models.ServiceHistory", b =>
                {
                    b.HasOne("FinalProject.BO.Models.SalesAgreementDetail", "SalesAgreementDetail")
                        .WithMany("ServiceHistories")
                        .HasForeignKey("SalesAgreementDetailId")
                        .IsRequired()
                        .HasConstraintName("FK__ServiceHi__Sales__7E37BEF6");

                    b.Navigation("SalesAgreementDetail");
                });

            modelBuilder.Entity("FinalProject.BO.Models.TestDrive", b =>
                {
                    b.HasOne("FinalProject.BO.Models.Car", "Car")
                        .WithMany("TestDrives")
                        .HasForeignKey("CarId")
                        .IsRequired()
                        .HasConstraintName("FK__TestDrive__CarID__4AB81AF0");

                    b.HasOne("FinalProject.BO.Models.ConsultHistory", "ConsultHistory")
                        .WithMany("TestDrives")
                        .HasForeignKey("ConsultHistoryId")
                        .HasConstraintName("FK__TestDrive__Consu__4BAC3F29");

                    b.HasOne("FinalProject.BO.Models.Customer", "Customer")
                        .WithMany("TestDrives")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK__TestDrive__Custo__48CFD27E");

                    b.HasOne("FinalProject.BO.Models.Dealer", "Dealer")
                        .WithMany("TestDrives")
                        .HasForeignKey("DealerId")
                        .IsRequired()
                        .HasConstraintName("FK__TestDrive__Deale__47DBAE45");

                    b.HasOne("FinalProject.BO.Models.SalesPerson", "SalesPerson")
                        .WithMany("TestDrives")
                        .HasForeignKey("SalesPersonId")
                        .IsRequired()
                        .HasConstraintName("FK__TestDrive__Sales__49C3F6B7");

                    b.Navigation("Car");

                    b.Navigation("ConsultHistory");

                    b.Navigation("Customer");

                    b.Navigation("Dealer");

                    b.Navigation("SalesPerson");
                });

            modelBuilder.Entity("FinalProject.BO.Models.VehicleRegistration", b =>
                {
                    b.HasOne("FinalProject.BO.Models.SalesAgreementDetail", "SalesAgreementDetail")
                        .WithMany("VehicleRegistrations")
                        .HasForeignKey("SalesAgreementDetailId")
                        .IsRequired()
                        .HasConstraintName("FK__VehicleRe__Sales__72C60C4A");

                    b.Navigation("SalesAgreementDetail");
                });

            modelBuilder.Entity("FinalProject.BO.Models.WarrantyClaim", b =>
                {
                    b.HasOne("FinalProject.BO.Models.Customer", "Customer")
                        .WithMany("WarrantyClaims")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK__WarrantyC__Custo__04E4BC85");

                    b.HasOne("FinalProject.BO.Models.SalesAgreementDetail", "SalesAgreementDetail")
                        .WithMany("WarrantyClaims")
                        .HasForeignKey("SalesAgreementDetailId")
                        .IsRequired()
                        .HasConstraintName("FK__WarrantyC__Sales__05D8E0BE");

                    b.Navigation("Customer");

                    b.Navigation("SalesAgreementDetail");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FinalProject.BO.Models.Car", b =>
                {
                    b.Navigation("ConsultHistories");

                    b.Navigation("DealerInventories");

                    b.Navigation("InventoryTransfers");

                    b.Navigation("LetterOfIntentDetails");

                    b.Navigation("SalesAgreementDetails");

                    b.Navigation("TestDrives");
                });

            modelBuilder.Entity("FinalProject.BO.Models.CarDelivery", b =>
                {
                    b.Navigation("CarDeliverySchedules");

                    b.Navigation("PreDeliveryInspections");
                });

            modelBuilder.Entity("FinalProject.BO.Models.ConsultHistory", b =>
                {
                    b.Navigation("LetterOfIntents");

                    b.Navigation("TestDrives");
                });

            modelBuilder.Entity("FinalProject.BO.Models.CreditApplication", b =>
                {
                    b.Navigation("CreditDocuments");

                    b.Navigation("PaymentHistories");
                });

            modelBuilder.Entity("FinalProject.BO.Models.Customer", b =>
                {
                    b.Navigation("ConsultHistories");

                    b.Navigation("CustomerComplaints");

                    b.Navigation("CustomerFeedbacks");

                    b.Navigation("CustomerNotifications");

                    b.Navigation("LetterOfIntents");

                    b.Navigation("SalesAgreements");

                    b.Navigation("TestDrives");

                    b.Navigation("WarrantyClaims");
                });

            modelBuilder.Entity("FinalProject.BO.Models.Dealer", b =>
                {
                    b.Navigation("ConsultHistories");

                    b.Navigation("DealerInventories");

                    b.Navigation("InventoryTransferFromDealers");

                    b.Navigation("InventoryTransferToDealers");

                    b.Navigation("LetterOfIntents");

                    b.Navigation("SalesAgreements");

                    b.Navigation("SalesPeople");

                    b.Navigation("TestDrives");
                });

            modelBuilder.Entity("FinalProject.BO.Models.LeasingCompany", b =>
                {
                    b.Navigation("CreditApplications");
                });

            modelBuilder.Entity("FinalProject.BO.Models.LetterOfIntent", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("CreditApplications");

                    b.Navigation("CustomerNotifications");

                    b.Navigation("LetterOfIntentDetails");

                    b.Navigation("SalesAgreements");
                });

            modelBuilder.Entity("FinalProject.BO.Models.LetterOfIntentDetail", b =>
                {
                    b.Navigation("SalesAgreementDetails");
                });

            modelBuilder.Entity("FinalProject.BO.Models.SalesAgreement", b =>
                {
                    b.Navigation("CarDeliveries");

                    b.Navigation("CustomerComplaints");

                    b.Navigation("CustomerFeedbacks");

                    b.Navigation("CustomerNotifications");

                    b.Navigation("PaymentHistories");

                    b.Navigation("SalesAgreementDetails");
                });

            modelBuilder.Entity("FinalProject.BO.Models.SalesAgreementDetail", b =>
                {
                    b.Navigation("ServiceHistories");

                    b.Navigation("VehicleRegistrations");

                    b.Navigation("WarrantyClaims");
                });

            modelBuilder.Entity("FinalProject.BO.Models.SalesPerson", b =>
                {
                    b.Navigation("ConsultHistories");

                    b.Navigation("LetterOfIntents");

                    b.Navigation("SalesAgreements");

                    b.Navigation("TestDrives");
                });

            modelBuilder.Entity("FinalProject.BO.Models.TestDrive", b =>
                {
                    b.Navigation("LetterOfIntents");
                });
#pragma warning restore 612, 618
        }
    }
}
